[
 {
  "docstatus": 0,
  "doctype": "Custom HTML Block",
  "html": "<div>\n    <div class=\"performance-container\">\n        <span>\n            <label for=\"task-time-label\">Time</label>\n            <select id=\"time-period\" class=\"form-control\">\n                <option value=\"this-week\">This Week</option>\n                <option value=\"last-week\">Last Week</option>\n                <option value=\"last-month\" selected>Last Month</option>\n            </select>\n        </span>\n\n    </div>\n    <div class=\"filter-container\">\n        <span>\n            <label for=\"task-priority\">Priority:</label>\n            <select id=\"task-priority\" class=\"form-control\">\n                <option value=\"All\" selected>All</option>\n                <option value=\"High\">High</option>\n                <option value=\"Medium\">Medium</option>\n                <option value=\"Low\">Low</option>\n            </select>\n        </span>\n        <span>\n            <label for=\"task-status\">Status:</label>\n            <select id=\"task-status\" class=\"form-control\">\n                <option value=\"all\" selected>All</option>\n                <option value=\"open\">Open</option>\n                <option value=\"closed\">Closed</option>\n            </select>\n        </span>\n\n        <span>\n            <label for=\"task-type-filter\">Task Type:</label>\n            <select id=\"task-type-filter\" class=\"form-control\">\n                <option value=\"all\">All</option>\n                <option value=\"todo\">ToDo Tasks</option>\n                <option value=\"checklist\">Checklist Tasks</option>\n            </select>\n        </span>\n\n        <span>\n            <label for=\"start-date\">Start:</label>\n            <input type=\"date\" id=\"start-date\" class=\"form-control\">\n        </span>\n\n        <span>\n            <label for=\"end-date\">End:</label>\n            <input type=\"date\" id=\"end-date\" class=\"form-control\">\n        </span>\n\n        <span id=\"department-filter-container\">\n            <label for=\"department-filter\">Department:</label>\n            <select id=\"department-filter\" class=\"form-control\">\n                <option value=\"\">Select Department</option>\n                <!-- Populated dynamically by JavaScript -->\n            </select>\n        </span>\n\n        <span>\n            <label for=\"view\">View:</label>\n            <select id=\"view\" class=\"form-control\">\n                <option value=\"\">My</option>\n                <!-- Populated dynamically by JavaScript -->\n            </select>\n        </span>\n    </div>\n\n    <table class=\"table table-bordered table-condensed\" id=\"todo_table\">\n        <thead>\n            <tr>\n                <th>ID</th>\n                <th>Reference Type</th>\n                <th>Reference Link</th>\n                <th>Description</th>\n                <th>Assigned By</th>\n                <th>Log Date</th>\n                <th>Due Date</th>\n                <th>Priority</th>\n                <th>Status</th>\n                <th>Action</th>\n                <th>View</th>\n            </tr>\n        </thead>\n        <tbody>\n            <!-- Rows will be dynamically populated by JavaScript -->\n        </tbody>\n    </table>\n</div>\n",
  "modified": "2025-02-26 14:18:38.304245",
  "name": "Task Dashboard",
  "private": 0,
  "roles": [],
  "script": "const todoTable = root_element.querySelector('#todo_table');\n\nfunction adjustUIBasedOnUserRole(isManager = false, isHR = false) {\n    let userRole = \"\";\n    const currentUser = frappe.session.user_fullname;\n\n    if (currentUser === \"Pawandeep Singh Behl\") {\n        userRole = \"Pawan Sir\";\n    }\n    else if (currentUser === \"Administrator\") {\n        userRole = \"Administrator\";\n    }\n    else if (isHR === true) {\n        userRole = \"Human Resources\"\n    }\n\n    else if (isManager === true) {\n        userRole = \"Manager\";\n    }\n\n    else {\n        userRole = \"Normal Employee\";\n    }\n\n    const departmentFilterContainer = root_element.querySelector('#department-filter');\n    const viewFilter = root_element.querySelector('#view');\n\n    switch (userRole) {\n        case \"Administrator\":\n            departmentFilterContainer.style.display = 'inline-block';\n            viewFilter.style.display = 'inline-block';\n            break;\n        case \"Pawan Sir\":\n            departmentFilterContainer.style.display = 'inline-block';\n            viewFilter.style.display = 'inline-block';\n            break;\n        case 'Human Resources':\n            departmentFilterContainer.style.display = 'inline-block';\n            viewFilter.style.display = 'inline-block';\n            break;\n        case 'Manager':\n            departmentFilterContainer.style.display = 'none';\n            viewFilter.style.display = 'inline-block';\n            break;\n        default:\n            departmentFilterContainer.style.display = 'none';\n            viewFilter.style.display = 'none';\n            break;\n    }\n\n\n}\n\nfunction sortTodos(todos, key, order) {\n    todos.sort((a, b) => {\n        if (a[key] < b[key]) {\n            return order === 'asc' ? -1 : 1;\n        }\n        if (a[key] > b[key]) {\n            return order === 'asc' ? 1 : -1;\n        }\n        return 0;\n    });\n}\n\nfunction setDefaultDates() {\n    const startDate = root_element.querySelector('#start-date');\n    const endDate = root_element.querySelector('#end-date');\n\n    const today = new Date();\n    const sixtyDaysAgo = new Date();\n    sixtyDaysAgo.setDate(today.getDate() - 30);\n    const oneDayAhead = new Date();\n    oneDayAhead.setDate(today.getDate() + 1);\n\n    startDate.value = sixtyDaysAgo.toISOString().split('T')[0];\n    endDate.value = oneDayAhead.toISOString().split('T')[0];\n}\n\nfunction formatDate(dateString) {\n    const date = new Date(dateString);\n    const day = String(date.getDate()).padStart(2, '0');\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const year = date.getFullYear().toString().slice(-2);\n    return `${day}/${month}/${year}`;\n}\n\n\nfunction handleTimePeriodChange() {\n    const selectedOption = timePeriodFilter.value;\n    const today = new Date();\n    let localStartDate, localEndDate;\n\n    switch (selectedOption) {\n        case 'this-week':\n            localStartDate = new Date(today.getFullYear(), today.getMonth(), today.getDate() - today.getDay());\n            localEndDate = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (6 - today.getDay()));\n            break;\n        case 'last-week':\n            localStartDate = new Date(today.getFullYear(), today.getMonth(), today.getDate() - today.getDay() - 7);\n            localEndDate = new Date(today.getFullYear(), today.getMonth(), today.getDate() - today.getDay() - 1);\n            break;\n        case 'last-month':\n            localStartDate = new Date(today.getFullYear(), today.getMonth() - 1, today.getDate());\n            localEndDate = new Date(today.getFullYear(), today.getMonth(), today.getDate());\n            break;\n        default:\n            localStartDate = new Date(today.getFullYear(), today.getMonth(), today.getDate() - today.getDay());\n            localEndDate = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (6 - today.getDay()));\n            break;\n    }\n\n    formattedStartDate = localStartDate.toISOString().split('T')[0];\n    formattedEndDate = localEndDate.toISOString().split('T')[0];\n\n    startDate.value = formattedStartDate;\n    endDate.value = formattedEndDate;\n    const userID = root_element.querySelector('#view').value;\n    fetchTodos(userID);\n    updateDelayedTasksPercentageUtility(userID)\n}\n\n\nfunction calculateDelayPercentage(startDate, endDate, completionDate) {\n    startDate = new Date(startDate);\n    endDate = new Date(endDate);\n    completionDate = new Date(completionDate);\n\n    const totalDuration = Math.ceil((endDate - startDate) / (1000 * 60 * 60 * 24))\n\n    const actualDuration = Math.ceil((completionDate - startDate) / (1000 * 60 * 60 * 24))\n\n    const delay = actualDuration - totalDuration;\n    const delayPercentage = (delay / totalDuration) * 100;\n\n    return delayPercentage.toFixed(2);\n\n}\n\nfunction calculateTasksPercentageNotCompleted(completedTasks, plannedTasks) {\n    const answer = ((completedTasks - plannedTasks) / plannedTasks) * 100;\n    return answer;\n}\n\nfunction calculateTimeDelay(allotedDays, takenDays) {\n    const answer = (allotedDays - takenDays) * 100;\n    return answer;\n}\n\nfunction calculateTasksPercentageCompletedLate(onTimeTasks, weeklyTasks) {\n    const answer = ((onTimeTasks - weeklyTasks) / weeklyTasks) * 100;\n    return answer;\n}\n\n\nfunction fetchTodosBasedOnStatus(userID, startDate, endDate, status = 'Open') {\n    return new Promise(function (resolve, reject) {\n        var filters = {\n            allocated_to: userID,\n            assined_date: [\"between\", [startDate, endDate]]\n        };\n\n        if (status === \"all\") {\n            filters.status = null;\n        } else {\n            filters.status = status;\n        }\n\n        frappe.call({\n            method: \"frappe.client.get_list\",\n            args: {\n                doctype: \"ToDo\",\n                filters: filters,\n                fields: [\"name\", \"reference_type\", \"reference_name\", \"description\", \"assigned_by\", \"assined_date\", \"date\", \"status\"],\n            },\n            callback: function (response) {\n                resolve(response.message.length);\n            },\n            error: function (xhr, status, error) {\n                reject(error);\n            }\n        });\n    });\n}\nfunction fetchUserNames(todos, userID) {\n    const userNames = new Set(todos.map(todo => todo.assigned_by));\n    \n    frappe.call({\n        method: \"frappe.client.get_list\",\n        args: {\n            doctype: \"User\",\n            fields: [\"name\", \"full_name\"],\n            filters: { name: [\"in\", Array.from(userNames)] },\n        },\n        callback: function (response) {\n            const userNameMap = new Map(response.message.map(user => [user.name, user.full_name]));\n            populateTodoTable(todos, userNameMap, userID);\n        },\n        error: function (xhr, status, error) {\n            console.error(\"Error fetching user names:\", error);\n            populateTodoTable(todos, new Map(), userID);\n        },\n    });\n}\n\nfunction fetchTodos(userID) {\n    if (userID instanceof Object) {\n        userID = frappe.session.logged_in_user;\n    }\n\n    const statusFilter = root_element.querySelector('#task-status');\n    const taskTypeFilter = root_element.querySelector('#task-type-filter');\n    const priorityFilter = root_element.querySelector('#task-priority'); \n    const startDate = root_element.querySelector('#start-date');\n    const endDate = root_element.querySelector('#end-date');\n    console.log(priorityFilter.value)\n\n    let filters = [\n        [\"allocated_to\", \"=\", userID || frappe.session.logged_in_user],\n    ];\n\n    // Apply status filter\n    if (statusFilter.value !== 'all') {\n        const capital = statusFilter.value.charAt(0).toUpperCase() + statusFilter.value.slice(1);\n        filters.push([\"status\", \"=\", capital]);\n    } else {\n        filters.push([\"status\", \"in\", [\"Open\", \"Closed\"]]);\n    }\n\n    // Apply task type filter\n    if (taskTypeFilter.value !== 'all') {\n        if (taskTypeFilter.value === 'todo') {\n            filters.push([\"reference_type\", \"!=\", \"Employee Checklist\"]);\n        } else {\n            filters.push([\"reference_type\", \"=\", \"Employee Checklist\"]);\n        }\n    }\n\n// Apply priority filter exactly like status filter\nif (priorityFilter.value !== 'All') {  // If not \"All\", apply exact match\n    const capital = priorityFilter.value.charAt(0).toUpperCase() + priorityFilter.value.slice(1);\n    filters.push([\"priority\", \"=\", capital]);\n} else {  // If \"All\", include all priorities\n    filters.push([\"priority\", \"in\", [\"High\", \"Medium\", \"Low\"]]);\n}\n\n// Debugging: Log the filters being sent\nconsole.log(\"Filters being sent:\", JSON.stringify(filters, null, 2));\n\n\n    // Apply date range filter\n    if (startDate.value && endDate.value) {\n        filters.push([\"assined_date\", \"between\", [startDate.value, endDate.value]]);\n    }\n\n    // Debug: Log the filters being sent\n    console.log(\"Filters being sent:\", JSON.stringify(filters, null, 2));\n\n    // Fetch todos\n    frappe.call({\n        method: \"frappe.client.get_list\",\n        args: {\n            doctype: \"ToDo\",\n            filters: filters,\n            fields: [\"name\", \"reference_type\", \"reference_name\", \"description\", \"assigned_by\", \"assined_date\", \"date\", \"priority\", \"status\"],\n        },\n        callback: function (response) {\n            if (response.message) {\n                fetchUserNames(response.message, userID);\n            } else {\n                console.error(\"No todo list data found.\");\n                todoTable.innerHTML = \"<thead><tr><th>ToDo Id</th><th>Reference Type</th><th>Reference Link</th><th>Description</th><th>Assigned By</th><th>Log Date</th><th>Due Date</th><th>Priority</th><th>Status</th><th>Action</th></tr></thead><tbody><tr><td colspan='10'>No tasks found</td></tr></tbody>\";\n            }\n        },\n        error: function (xhr, status, error) {\n            console.error(\"Error fetching todo list:\", error);\n        },\n    });\n}\n\nfunction fetchUserNames(todos, userID) {\n    const userNames = new Set(todos.map(todo => todo.assigned_by));\n    frappe.call({\n        method: \"frappe.client.get_list\",\n        args: {\n            doctype: \"User\",\n            fields: [\"name\", \"full_name\"],\n            filters: {\n                name: [\"in\", Array.from(userNames)],\n            },\n        },\n        callback: function (response) {\n            const userNameMap = new Map(response.message.map(user => [user.name, user.full_name]));\n            populateTodoTable(todos, userNameMap, userID);\n        },\n        error: function (xhr, status, error) {\n            console.error(\"Error fetching user names:\", error);\n            populateTodoTable(todos, new Map(), userID);\n        },\n    });\n}\nconst fetchManagedUsers = () => {\n    return new Promise((resolve, reject) => {\n        if (frappe.session.user_fullname.includes(\"Pawandeep Bahl\")) {\n            const mdObject = {\n                employee_name: \"Pawandeep Singh Bahl\",\n                userID: \"pawanbahl@apaulsoftware.com\",\n                filteredEmployees: [],\n                access: \"All\",\n                department: \"MD\",\n\n            }\n            resolve(mdObject);\n        }\n        else if (frappe.session.user === \"Administrator\") {\n            const adminObject = {\n                employee_name: \"Administrator\",\n                userID: \"dme@apaulsoftware.com\",\n                filteredEmployees: [],\n                access: \"All\",\n                department: \"Developer\"\n            }\n            resolve(adminObject);\n        }\n        const currentUser = frappe.session.user_fullname.toLowerCase();\n        let employees = [];\n        let managerID = \"\";\n        const fetchPage = (start) => {\n            frappe.call({\n                method: \"frappe.client.get_list\",\n                args: {\n                    doctype: \"Employee\",\n                    fields: [\"employee_name\", \"reports_to\", \"employee\", \"user_id\", \"department\"],\n                    limit_page_length: 300,\n                    start: start\n                },\n                callback: function (response) {\n                    const emps = response.message;\n                    employees = employees.concat(emps); const todoTable = root_element.querySelector('#todo_table');\n\n                    function adjustUIBasedOnUserRole(isManager = false, isHR = false) {\n                        let userRole = \"\";\n                        const currentUser = frappe.session.user_fullname;\n\n                        if (currentUser === \"Pawandeep Singh Behl\") {\n                            userRole = \"Pawan Sir\";\n                        }\n                        else if (currentUser === \"Administrator\") {\n                            userRole = \"Administrator\";\n                        }\n                        else if (isHR === true) {\n                            userRole = \"Human Resources\"\n                        }\n\n                        else if (isManager === true) {\n                            userRole = \"Manager\";\n                        }\n\n                        else {\n                            userRole = \"Normal Employee\";\n                        }\n\n                        const departmentFilterContainer = root_element.querySelector('#department-filter');\n                        const viewFilter = root_element.querySelector('#view');\n\n                        switch (userRole) {\n                            case \"Administrator\":\n                                departmentFilterContainer.style.display = 'inline-block';\n                                viewFilter.style.display = 'inline-block';\n                                break;\n                            case \"Pawan Sir\":\n                                departmentFilterContainer.style.display = 'inline-block';\n                                viewFilter.style.display = 'inline-block';\n                                break;\n                            case 'Human Resources':\n                                departmentFilterContainer.style.display = 'inline-block';\n                                viewFilter.style.display = 'inline-block';\n                                break;\n                            case 'Manager':\n                                departmentFilterContainer.style.display = 'none';\n                                viewFilter.style.display = 'inline-block';\n                                break;\n                            default:\n                                departmentFilterContainer.style.display = 'none';\n                                viewFilter.style.display = 'none';\n                                break;\n                        }\n\n\n                    }\n\n                    function sortTodos(todos, key, order) {\n                        todos.sort((a, b) => {\n                            if (a[key] < b[key]) {\n                                return order === 'asc' ? -1 : 1;\n                            }\n                            if (a[key] > b[key]) {\n                                return order === 'asc' ? 1 : -1;\n                            }\n                            return 0;\n                        });\n                    }\n\n                    function setDefaultDates() {\n                        const startDate = root_element.querySelector('#start-date');\n                        const endDate = root_element.querySelector('#end-date');\n\n                        const today = new Date();\n                        const sixtyDaysAgo = new Date();\n                        sixtyDaysAgo.setDate(today.getDate() - 30);\n                        const oneDayAhead = new Date();\n                        oneDayAhead.setDate(today.getDate() + 1);\n\n                        startDate.value = sixtyDaysAgo.toISOString().split('T')[0];\n                        endDate.value = oneDayAhead.toISOString().split('T')[0];\n                    }\n\n                    function formatDate(dateString) {\n                        const date = new Date(dateString);\n                        const day = String(date.getDate()).padStart(2, '0');\n                        const month = String(date.getMonth() + 1).padStart(2, '0');\n                        const year = date.getFullYear().toString().slice(-2);\n                        return `${day}/${month}/${year}`;\n                    }\n\n\n                    function handleTimePeriodChange() {\n                        const selectedOption = timePeriodFilter.value;\n                        const today = new Date();\n                        let localStartDate, localEndDate;\n\n                        switch (selectedOption) {\n                            case 'this-week':\n                                localStartDate = new Date(today.getFullYear(), today.getMonth(), today.getDate() - today.getDay());\n                                localEndDate = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (6 - today.getDay()));\n                                break;\n                            case 'last-week':\n                                localStartDate = new Date(today.getFullYear(), today.getMonth(), today.getDate() - today.getDay() - 7);\n                                localEndDate = new Date(today.getFullYear(), today.getMonth(), today.getDate() - today.getDay() - 1);\n                                break;\n                            case 'last-month':\n                                localStartDate = new Date(today.getFullYear(), today.getMonth() - 1, today.getDate());\n                                localEndDate = new Date(today.getFullYear(), today.getMonth(), today.getDate());\n                                break;\n                            default:\n                                localStartDate = new Date(today.getFullYear(), today.getMonth(), today.getDate() - today.getDay());\n                                localEndDate = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (6 - today.getDay()));\n                                break;\n                        }\n\n                        formattedStartDate = localStartDate.toISOString().split('T')[0];\n                        formattedEndDate = localEndDate.toISOString().split('T')[0];\n\n                        startDate.value = formattedStartDate;\n                        endDate.value = formattedEndDate;\n\n                        const userID = root_element.querySelector('#view').value;\n                        fetchTodos(userID)\n                    }\n\n                    function calculateDelayPercentage(startDate, endDate, completionDate) {\n                        startDate = new Date(startDate);\n                        endDate = new Date(endDate);\n                        completionDate = new Date(completionDate);\n\n                        const totalDuration = Math.ceil((endDate - startDate) / (1000 * 60 * 60 * 24))\n\n                        const actualDuration = Math.ceil((completionDate - startDate) / (1000 * 60 * 60 * 24))\n\n                        const delay = actualDuration - totalDuration;\n                        const delayPercentage = (delay / totalDuration) * 100;\n\n                        const valueToPopulateWith = delayPercentage.toFixed(2);\n\n                        return valueToPopulateWith;\n\n                    }\n\n                    function calculateTasksPercentageNotCompleted(completedTasks, plannedTasks) {\n                        const answer = ((completedTasks - plannedTasks) / plannedTasks) * 100;\n\n                    }\n\n                    function calculateTimeDelay(allotedDays, takenDays) {\n                        const answer = (allotedDays - takenDays) * 100;\n\n                    }\n\n                    function calculateTasksPercentageCompletedLate(onTimeTasks, weeklyTasks) {\n                        const answer = ((onTimeTasks - weeklyTasks) / weeklyTasks) * 100;\n\n                    }\n\n                    function fetchTodos(userID) {\n                        if (userID instanceof Object) {\n                            userID = frappe.session.logged_in_user;\n                        }\n                        const statusFilter = root_element.querySelector('#task-status');\n                        const taskTypeFilter = root_element.querySelector('#task-type-filter');\n                        const priorityFilter = root_element.querySelector('#task-priority'); // Priority Filter\n                        const startDate = root_element.querySelector('#start-date');\n                        const endDate = root_element.querySelector('#end-date');\n                    \n                        let filters = [\n                            [\"allocated_to\", \"=\", userID || frappe.session.logged_in_user],\n                        ];\n                    \n                        // Apply status filter\n                        if (statusFilter.value !== 'all') {\n                            const capital = statusFilter.value.charAt(0).toUpperCase() + statusFilter.value.slice(1);\n                            filters.push([\"status\", \"=\", capital]);\n                        } else {\n                            filters.push([\"status\", \"in\", [\"Open\", \"Closed\"]]);\n                        }\n                    \n                        // Apply task type filter\n                        if (taskTypeFilter.value !== 'all') {\n                            if (taskTypeFilter.value === 'todo') {\n                                filters.push([\"reference_type\", \"!=\", \"Employee Checklist\"]);\n                            } else {\n                                filters.push([\"reference_type\", \"=\", \"Employee Checklist\"]);\n                            }\n                        }\n                    \n                      // Apply priority filter ONLY if \"All\" is NOT selected\n                        if (priorityFilter.value !== 'All') {  // If not \"All\", apply exact match\n                            const capital = priorityFilter.value.charAt(0).toUpperCase() + priorityFilter.value.slice(1);\n                            filters.push([\"priority\", \"=\", capital]);\n                        } else {  // If \"All\", include all priorities\n                            filters.push([\"priority\", \"in\", [\"High\", \"Medium\", \"Low\"]]);\n                        }\n\n                        // Apply date range filter\n                        if (startDate.value && endDate.value) {\n                            const startDateObj = new Date(startDate.value);\n                            const endDateObj = new Date(endDate.value);\n                            filters.push([\"assined_date\", \"between\", [startDateObj.toISOString(), endDateObj.toISOString()]]);\n                        }\n                    \n                        // Debugging: Log the filters being sent\n                        console.log(\"Filters being sent:\", filters);\n                    \n                        // Fetch todos\n                        frappe.call({\n                            method: \"frappe.client.get_list\",\n                            args: {\n                                doctype: \"ToDo\",\n                                filters: filters,\n                                fields: [\"name\", \"reference_type\", \"reference_name\", \"description\", \"assigned_by\", \"assined_date\", \"date\", \"priority\", \"status\"], // Include Priority\n                            },\n                            callback: function (response) {\n                                if (response.message) {\n                                    fetchUserNames(response.message, userID);\n                                } else {\n                                    console.error(\"No todo list data found.\");\n                                    todoTable.innerHTML = \"<thead><tr><th>ToDo Id</th><th>Reference Type</th><th>Reference Link</th><th>Description</th><th>Assigned By</th><th>Log Date</th><th>Due Date</th><th>Priority</th><th>Status</th><th>Action</th></tr></thead><tbody><tr><td colspan='10'>No tasks found</td></tr></tbody>\";\n                                }\n                            },\n                            error: function (xhr, status, error) {\n                                console.error(\"Error fetching todo list:\", error);\n                            },\n                        });\n                    }\n                    function fetchUserNames(todos, userID) {\n                        const userNames = new Set(todos.map(todo => todo.assigned_by));\n                        frappe.call({\n                            method: \"frappe.client.get_list\",\n                            args: {\n                                doctype: \"User\",\n                                fields: [\"name\", \"full_name\"],\n                                filters: {\n                                    name: [\"in\", Array.from(userNames)],\n                                },\n                            },\n                            callback: function (response) {\n                                const userNameMap = new Map(response.message.map(user => [user.name, user.full_name]));\n                                populateTodoTable(todos, userNameMap, userID);\n                            },\n                            error: function (xhr, status, error) {\n                                console.error(\"Error fetching user names:\", error);\n                                populateTodoTable(todos, new Map(), userID);\n                            },\n                        });\n                    }\n\n                    const fetchManagedUsers = () => {\n                        return new Promise((resolve, reject) => {\n                            if (frappe.session.user_fullname.includes(\"Pawandeep Bahl\")) {\n                                const mdObject = {\n                                    employee_name: \"Pawandeep Singh Bahl\",\n                                    userID: \"pawanbahl@apaulsoftware.com\",\n                                    filteredEmployees: [],\n                                    access: \"All\",\n                                    department: \"MD\",\n\n                                }\n                                resolve(mdObject);\n                            }\n                            else if (frappe.session.user === \"Administrator\") {\n                                const adminObject = {\n                                    employee_name: \"Administrator\",\n                                    userID: \"dme@apaulsoftware.com\",\n                                    filteredEmployees: [],\n                                    access: \"All\",\n                                    department: \"Developer\"\n                                }\n                                resolve(adminObject);\n                            }\n                            const currentUser = frappe.session.user_fullname.toLowerCase();\n                            let employees = [];\n                            let managerID = \"\";\n                            const fetchPage = (start) => {\n                                frappe.call({\n                                    method: \"frappe.client.get_list\",\n                                    args: {\n                                        doctype: \"Employee\",\n                                        fields: [\"employee_name\", \"reports_to\", \"employee\", \"user_id\", \"department\"],\n                                        limit_page_length: 300,\n                                        start: start\n                                    },\n                                    callback: function (response) {\n                                        const emps = response.message;\n                                        employees = employees.concat(emps);\n                                        if (emps.length > 300) {\n                                            fetchPage(start + emps.length)\n                                        }\n                                        else {\n                                            const foundEmployee = employees.find((emp) => {\n                                                if (emp.employee_name.toLowerCase().includes(currentUser))\n                                                    return true;\n                                            })\n                                            if (foundEmployee) {\n                                                managerID = foundEmployee.employee;\n                                                const filteredEmployees = employees.filter((emp) => emp.reports_to === managerID)\n\n                                                const resolvedObject = {\n                                                    filteredEmployees: filteredEmployees,\n                                                    userID: foundEmployee.user_id,\n                                                    department: foundEmployee.department,\n                                                    employee_name: foundEmployee.employee_name,\n                                                }\n                                                resolve(resolvedObject);\n                                            }\n                                            else {\n                                                reject(\"Manager ID was not found\")\n                                            }\n                                        }\n                                    },\n                                    error: function (xhr, x, error) {\n                                        reject(error)\n                                    }\n                                })\n                            }\n\n                            fetchPage(0);\n                        })\n                    }\n\n                    function fetchDepartments() {\n                        return new Promise((resolve, reject) => {\n                            let departments = [];\n                            const fetchPage = (start) => {\n                                frappe.call({\n                                    method: \"frappe.client.get_list\",\n                                    args: {\n                                        doctype: \"Department\",\n                                        fields: [\"department_name\"],\n                                        limit_page_length: 30,\n                                        start: start\n                                    },\n                                    callback: function (response) {\n                                        const dps = response.message;\n                                        departments = departments.concat(dps);\n\n                                        if (dps.length > 30) {\n                                            fetchPage(start + dps.length)\n                                        }\n                                        else {\n                                            resolve(departments);\n                                        }\n                                    },\n                                    error: function (xhr, status, error) {\n                                        reject(error);\n                                    }\n                                })\n                            }\n                            fetchPage(0);\n                        })\n                    }\n\n                    function fetchEmployeesWithDepartmentName(departmentName) {\n                        return new Promise((resolve, reject) => {\n                            fetchDepartments().then(departments => {\n                                const matchingDepartments = departments.filter(dep => dep.department_name.toLowerCase().includes(departmentName.toLowerCase()));\n\n                                if (matchingDepartments.length > 0) {\n                                    const departmentFilters = matchingDepartments.map(dep => dep.department_name);\n\n                                    frappe.call({\n                                        method: \"frappe.client.get_list\",\n                                        args: {\n                                            doctype: \"Employee\",\n                                            fields: [\"employee_name\", \"reports_to\", \"employee\", \"user_id\", \"department\"],\n                                            filters: {\n                                                department: [\"like\", `%${departmentFilters.join('%')}%`]\n                                            }\n                                        },\n                                        callback: function (response) {\n                                            \n                                            resolve(response.message);\n                                        },\n                                        error: function (xhr, status, error) {\n                                            console.error(\"Error fetching employees by department:\", error);\n                                            reject(error);\n                                        },\n                                    });\n                                } else {\n                                    console.error(\"No departments found matching:\", departmentName);\n                                    resolve([]);\n                                }\n                            }).catch(error => {\n                                console.error(\"Error fetching departments:\", error);\n                                reject(error);\n                            });\n                        });\n                    }\n                    function populateTodoTable(todos, userNameMap, userID) {\n                        if (todos.length === 0) {\n                        todoTable.innerHTML = ` <tr> <td colspan=\"5\" style=\"text-align: center; padding: 20px;\"> <h2 style=\"color: #999;\">No Todos were found for the selected filters.</h2> </td> </tr>`;\n                        return;\n                      }\n                      todoTable.innerHTML = \"\";\n                      var tableHTML = \"<thead>\";\n                      tableHTML += \"<tr>\";\n                      tableHTML += \"<th data-sort='name'>ToDo Id</th>\";\n                      tableHTML += \"<th data-sort='reference_type'>Reference Type</th>\";\n                      tableHTML += \"<th>Reference Link</th>\";\n                      tableHTML += \"<th data-sort='description'>Description</th>\";\n                      tableHTML += \"<th data-sort='assigned_by'>Assigned By</th>\";\n                      tableHTML += \"<th data-sort='assined_date'>Log Date</th>\";\n                      tableHTML += \"<th data-sort='date'>Due Date</th>\";\n                      tableHTML += \"<th data-sort='priority'>Priority</th>\";\n                      tableHTML += \"<th data-sort='status'>Status</th>\";\n                      tableHTML += \"<th>Action</th>\";\n                      tableHTML += \"</tr></thead>\";\n                      tableHTML += \"<tbody>\";\n                    \n                      todos.forEach(function (todo) {\n                        var statusClass =\n                          todo.status === \"Closed\" ? \"closed-status\" : \"opened-status\";\n                        var priorityClass = todo.priority?.toLowerCase() || ''; // Priority Class\n                        tableHTML += \"<tr>\";\n                        tableHTML +=\n                          \"<td><a href='/app/todo/\" + todo.name + \"'>\" + todo.name + \"</a></td>\";\n                        tableHTML += \"<td>\" + todo.reference_type + \"</td>\";\n                        tableHTML +=\n                          \"<td><a href='/app/\" +\n                          todo.reference_type?.toLowerCase().replace(/\\s+/g, \"-\") +\n                          \"/\" +\n                          todo.reference_name +\n                          \"'>\" +\n                          todo.reference_name +\n                          \"</a></td>\";\n                        tableHTML += \"<td>\" + todo.description + \"</td>\";\n                        tableHTML +=\n                          \"<td class='assigned-by'>\" +\n                          (userNameMap.get(todo.assigned_by) || todo.assigned_by) +\n                          \"</td>\";\n                        tableHTML +=\n                          \"<td class='creation-date'>\" + formatDate(todo.assined_date) + \"</td>\";\n                        tableHTML += \"<td class='due-date'>\" + formatDate(todo.date) + \"</td>\";\n                        tableHTML += \"<td class='priority \" + priorityClass + \"'>\" + (todo.priority || '') + \"</td>\"; // Priority Column\n                        tableHTML += \"<td class='\" + statusClass + \"'>\" + todo.status + \"</td>\";\n                        tableHTML +=\n                          \"<td><button class='close-todo' data-todo-name='\" +\n                          todo.name +\n                          \"'>Close</button></td>\";\n                        tableHTML += \"</tr>\";\n                      });\n                    \n                      tableHTML += \"</tbody>\";\n                      todoTable.innerHTML = tableHTML;\n                    \n                      const closeTodoButtons = todoTable.querySelectorAll(\".close-todo\");\n                      closeTodoButtons.forEach((button) => {\n                        button.addEventListener(\"click\", () => {\n                          const todoName = button.dataset.todoName;\n                          closeTodo(todoName, userID);\n                        });\n                      });\n                    \n                      const headers = todoTable.querySelectorAll(\"th[data-sort]\");\n                      headers.forEach((header) => {\n                        header.addEventListener(\"click\", () => {\n                          const sortKey = header.getAttribute(\"data-sort\");\n                          const sortOrder =\n                            header.getAttribute(\"data-sort-order\") === \"asc\" ? \"desc\" : \"asc\";\n                          header.setAttribute(\"data-sort-order\", sortOrder);\n                          sortTodos(todos, sortKey, sortOrder);\n                          populateTodoTable(todos, userNameMap);\n                        });\n                      });\n                    }\n\n                    function closeTodo(todoName, whose_todos) {\n                        frappe.confirm(\n                            \"Close this todo ?\",\n                            () => {\n                                frappe.call({\n                                    method: \"frappe.client.set_value\",\n                                    args: {\n                                        doctype: \"ToDo\",\n                                        name: todoName,\n                                        fieldname: \"status\",\n                                        value: \"Closed\",\n                                    },\n                                    callback: function (response) {\n                                        if (response.message) {\n                                            fetchTodos(whose_todos);\n                                        } else {\n                                            console.error(\"Failed to close ToDo:\", response.exc);\n                                        }\n                                    },\n                                    error: function (xhr, status, error) {\n                                        console.error(\"Error closing ToDo:\", error);\n                                    },\n                                });\n                            },\n                            () => {\n                              \n                            }\n                        );\n                    }\n\n                    function populateViewDropDown(employees_reporting_to_you) {\n                        const viewDropDown = root_element.querySelector(\"#view\");\n                        viewDropDown.innerHTML = ''; \n\n                        const defaultOption = document.createElement('option');\n                        defaultOption.value = ''; \n                        defaultOption.textContent = 'My';\n                        viewDropDown.appendChild(defaultOption);\n\n                        employees_reporting_to_you.forEach((employee) => {\n                            const option = document.createElement('option');\n                            option.value = employee.user_id;\n                            option.textContent = employee.employee_name;\n                            viewDropDown.appendChild(option);\n                        });\n\n                        fetchDepartments().then(departments => {\n                            populateDepartmentDropdown(departments);\n                        }).catch((error) => console.log(error))\n\n                    }\n\n                    function populateDepartmentDropdown(departments, selectedDepartment = '') {\n                        const departmentDropdown = root_element.querySelector(\"#department-filter\");\n                        departmentDropdown.innerHTML = \"\";\n\n                        const defaultOption = document.createElement('option');\n                        defaultOption.value = '';\n                        defaultOption.textContent = 'Select Department';\n                        departmentDropdown.appendChild(defaultOption);\n\n                        departments.forEach((dpt) => {\n                            const option = document.createElement('option');\n                            option.value = dpt.department_name;\n                            option.textContent = dpt.department_name;\n                            if (dpt.department_name === selectedDepartment) {\n                                option.selected = true;\n                            }\n                            departmentDropdown.appendChild(option);\n                        })\n\n                        if (selectedDepartment) {\n                            fetchTodos();\n                        }\n                    }\n\n\n                    function setUI() {\n                        fetchManagedUsers().then((resolvedObject) => {\n                            if (resolvedObject.employee_name === \"Pawandeep Singh Bahl\") {\n                                adjustUIBasedOnUserRole(false, true);\n                            }\n                            else if (resolvedObject.filteredEmployees.length === 0) {\n                                if (resolvedObject.department.includes(\"Human Resources\")) {\n                                    adjustUIBasedOnUserRole(false, true);\n                                }\n                                else if (resolvedObject.department === \"Developer\") {\n                                    adjustUIBasedOnUserRole(true, false);\n                                }\n                            }\n                            else {\n                                if (resolvedObject.department.includes(\"Human Resources\")) {\n                                    adjustUIBasedOnUserRole(true, true);\n                                }\n                                else {\n                                    adjustUIBasedOnUserRole(true, false);\n                                }\n                            }\n                            populateViewDropDown(resolvedObject.filteredEmployees);\n                            fetchTodos(resolvedObject.userID)\n                        }).catch((error) => {\n                            if (typeof error === \"string\" && error === \"Manager ID was not found\") {\n                                adjustUIBasedOnUserRole(false, false);\n                            }\n                            else {\n                            }\n                        })\n                    }\n\n                    setUI();\n                    setDefaultDates();\n                    fetchTodos();\n\n                    const taskTypeFilter = root_element.querySelector('#task-type-filter');\n                    taskTypeFilter.addEventListener('change', function (event) {\n                        const userID = root_element.querySelector('#view').value;\n                        fetchTodos(userID);\n                    });\n\n                    const statusFilter = root_element.querySelector('#task-status');\n                    statusFilter.addEventListener('change', function (event) {\n                        const userID = root_element.querySelector('#view').value;\n                        fetchTodos(userID);\n                    });\n\n                    const timePeriodFilter = root_element.querySelector('#time-period');\n                    timePeriodFilter.addEventListener('change', handleTimePeriodChange)\n\n                    const startDate = root_element.querySelector('#start-date');\n                    startDate.addEventListener('change', function (event) {\n                        const userID = root_element.querySelector('#view').value;\n                        fetchTodos(userID);\n                    });\n\n                    const endDate = root_element.querySelector('#end-date');\n                    endDate.addEventListener('change', function (event) {\n                        const userID = root_element.querySelector('#view').value;\n                        fetchTodos(userID);\n                    });\n\n                    const employeeTodos = root_element.querySelector(`#view`);\n                    employeeTodos.addEventListener('change', function (event) {\n                        const selectedUserID = event.target.value;\n                        fetchTodos(selectedUserID)\n                    });\n\n                    const departmentFilter = root_element.querySelector(\"#department-filter\");\n                    departmentFilter.addEventListener('change', function (event) {\n                        const selectedDepartmentName = event.target.value;\n                        if (selectedDepartmentName) {\n                            fetchEmployeesWithDepartmentName(selectedDepartmentName).then((employees) => {\n                                populateViewDropDown(employees);\n                                fetchDepartments().then((departments) => {\n                                    populateDepartmentDropdown(departments, selectedDepartmentName)\n                                })\n                            }).catch((error) => console.log(error))\n                        }\n                        else {\n                            populateViewDropDown([]);\n                        }\n                    })\n\n\n\n\n\n                    if (emps.length > 300) {\n                        fetchPage(start + emps.length)\n                    }\n                    else {\n                        const foundEmployee = employees.find((emp) => {\n                            if (emp.employee_name.toLowerCase().includes(currentUser))\n                                return true;\n                        })\n                        if (foundEmployee) {\n                            managerID = foundEmployee.employee;\n                            const filteredEmployees = employees.filter((emp) => emp.reports_to === managerID)\n\n                            const resolvedObject = {\n                                filteredEmployees: filteredEmployees,\n                                userID: foundEmployee.user_id,\n                                department: foundEmployee.department,\n                                employee_name: foundEmployee.employee_name,\n                            }\n                            resolve(resolvedObject);\n                        }\n                        else {\n                            reject(\"Manager ID was not found\")\n                        }\n                    }\n                },\n                error: function (xhr, x, error) {\n                    reject(error)\n                }\n            })\n        }\n\n        fetchPage(0);\n    })\n}\n\nfunction fetchDepartments() {\n    return new Promise((resolve, reject) => {\n        let departments = [];\n        const fetchPage = (start) => {\n            frappe.call({\n                method: \"frappe.client.get_list\",\n                args: {\n                    doctype: \"Department\",\n                    fields: [\"department_name\"],\n                    limit_page_length: 30,\n                    start: start\n                },\n                callback: function (response) {\n                    const dps = response.message;\n                    departments = departments.concat(dps);\n\n                    if (dps.length > 30) {\n                        fetchPage(start + dps.length)\n                    }\n                    else {\n                        resolve(departments);\n                    }\n                },\n                error: function (xhr, status, error) {\n                    reject(error);\n                }\n            })\n        }\n        fetchPage(0);\n    })\n}\n\nfunction fetchEmployeesWithDepartmentName(departmentName) {\n    return new Promise((resolve, reject) => {\n        fetchDepartments().then(departments => {\n            const matchingDepartments = departments.filter(dep => dep.department_name.toLowerCase().includes(departmentName.toLowerCase()));\n\n            if (matchingDepartments.length > 0) {\n                const departmentFilters = matchingDepartments.map(dep => dep.department_name);\n\n                frappe.call({\n                    method: \"frappe.client.get_list\",\n                    args: {\n                        doctype: \"Employee\",\n                        fields: [\"employee_name\", \"reports_to\", \"employee\", \"user_id\", \"department\"],\n                        filters: {\n                            department: [\"like\", `%${departmentFilters.join('%')}%`]\n                        }\n                    },\n                    callback: function (response) {\n                        \n                        resolve(response.message);\n                    },\n                    error: function (xhr, status, error) {\n                        console.error(\"Error fetching employees by department:\", error);\n                        reject(error);\n                    },\n                });\n            } else {\n                console.error(\"No departments found matching:\", departmentName);\n                resolve([]);\n            }\n        }).catch(error => {\n            console.error(\"Error fetching departments:\", error);\n            reject(error);\n        });\n    });\n}\n\nfunction populateTodoTable(todos, userNameMap, userID) {\n    if (todos.length === 0) {\n        todoTable.innerHTML = `\n            <tr>\n                <td colspan=\"10\" style=\"text-align: center; padding: 20px;\">\n                    <h2 style=\"color: #999;\">No Todos were found for the selected filters.</h2>\n                </td>\n            </tr>`;\n        return;\n    }\n    todoTable.innerHTML = '';\n    var tableHTML = \"<thead>\";\n    tableHTML += \"<tr>\";\n    tableHTML += \"<th data-sort='name'>ToDo Id</th>\";\n    tableHTML += \"<th data-sort='reference_type'>Reference Type</th>\";\n    tableHTML += \"<th>Reference Link</th>\";\n    tableHTML += \"<th data-sort='description'>Description</th>\";\n    tableHTML += \"<th data-sort='assigned_by'>Assigned By</th>\";\n    tableHTML += \"<th data-sort='assined_date'>Log Date</th>\";\n    tableHTML += \"<th data-sort='date'>Due Date</th>\";\n    tableHTML += \"<th data-sort='priority'>Priority</th>\"; // Priority Column\n    tableHTML += \"<th data-sort='status'>Status</th>\";\n    tableHTML += \"<th>Action</th>\";\n    tableHTML += \"</tr></thead>\";\n    tableHTML += \"<tbody>\";\n\n    todos.forEach(function (todo) {\n        var statusClass = todo.status === \"Closed\" ? \"closed-status\" : \"opened-status\";\n        var priorityClass = todo.priority?.toLowerCase() || ''; // Priority Class\n        tableHTML += \"<tr>\";\n        tableHTML += \"<td><a href='/app/todo/\" + todo.name + \"'>\" + todo.name + \"</a></td>\";\n        tableHTML += \"<td>\" + todo.reference_type + \"</td>\";\n        tableHTML += \"<td><a href='/app/\" + todo.reference_type?.toLowerCase().replace(/\\s+/g, '-') + \"/\" + todo.reference_name + \"'>\" + todo.reference_name + \"</a></td>\";\n        tableHTML += \"<td>\" + todo.description + \"</td>\";\n        tableHTML += \"<td class='assigned-by'>\" + (userNameMap.get(todo.assigned_by) || todo.assigned_by) + \"</td>\";\n        tableHTML += \"<td class='creation-date'>\" + formatDate(todo.assined_date) + \"</td>\";\n        tableHTML += \"<td class='due-date'>\" + formatDate(todo.date) + \"</td>\";\n        tableHTML += \"<td class='priority \" + priorityClass + \"'>\" + (todo.priority || '') + \"</td>\"; // Priority Column\n        tableHTML += \"<td class='\" + statusClass + \"'>\" + todo.status + \"</td>\";\n        tableHTML += \"<td><button class='close-todo' data-todo-name='\" + todo.name + \"'>Close</button></td>\";\n        tableHTML += \"</tr>\";\n    });\n\n    tableHTML += \"</tbody>\";\n    todoTable.innerHTML = tableHTML;\n\n    const closeTodoButtons = todoTable.querySelectorAll('.close-todo');\n    closeTodoButtons.forEach(button => {\n        button.addEventListener('click', () => {\n            const todoName = button.dataset.todoName;\n            closeTodo(todoName, userID);\n        });\n    });\n\n    const headers = todoTable.querySelectorAll('th[data-sort]');\n    headers.forEach(header => {\n        header.addEventListener('click', () => {\n            const sortKey = header.getAttribute('data-sort');\n            const sortOrder = header.getAttribute('data-sort-order') === 'asc' ? 'desc' : 'asc';\n            header.setAttribute('data-sort-order', sortOrder);\n            sortTodos(todos, sortKey, sortOrder);\n            populateTodoTable(todos, userNameMap);\n        });\n    });\n}\nfunction closeTodo(todoName, whose_todos) {\n    frappe.confirm(\n        \"Close this todo ?\",\n        () => {\n            frappe.call({\n                method: \"frappe.client.set_value\",\n                args: {\n                    doctype: \"ToDo\",\n                    name: todoName,\n                    fieldname: \"status\",\n                    value: \"Closed\",\n                },\n                callback: function (response) {\n                    if (response.message) {\n                        fetchTodos(whose_todos);\n                    } else {\n                        console.error(\"Failed to close ToDo:\", response.exc);\n                    }\n                },\n                error: function (xhr, status, error) {\n                    console.error(\"Error closing ToDo:\", error);\n                },\n            });\n        },\n        () => {\n        }\n    );\n}\n\nfunction populateViewDropDown(employees_reporting_to_you) {\n    const viewDropDown = root_element.querySelector(\"#view\");\n    viewDropDown.innerHTML = '';\n    const defaultOption = document.createElement('option');\n    defaultOption.value = ''; \n    defaultOption.textContent = 'My'; \n    viewDropDown.appendChild(defaultOption);\n\n    employees_reporting_to_you.forEach((employee) => {\n        const option = document.createElement('option');\n        option.value = employee.user_id;\n        option.textContent = employee.employee_name;\n        viewDropDown.appendChild(option);\n    });\n\n    fetchDepartments().then(departments => {\n        populateDepartmentDropdown(departments);\n\n    }).catch((error) => console.log(error))\n\n}\n\nfunction populateDepartmentDropdown(departments, selectedDepartment = '') {\n    const departmentDropdown = root_element.querySelector(\"#department-filter\");\n    departmentDropdown.innerHTML = \"\";\n\n    const defaultOption = document.createElement('option');\n    defaultOption.value = '';\n    defaultOption.textContent = 'Select Department';\n    departmentDropdown.appendChild(defaultOption);\n\n    departments.forEach((dpt) => {\n        const option = document.createElement('option');\n        option.value = dpt.department_name;\n        option.textContent = dpt.department_name;\n        if (dpt.department_name === selectedDepartment) {\n            option.selected = true;\n        }\n        departmentDropdown.appendChild(option);\n    })\n\n    if (selectedDepartment) {\n        fetchTodos();\n    }\n}\n\n\nfunction setUI() {\n    fetchManagedUsers().then((resolvedObject) => {\n        if (resolvedObject.employee_name === \"Pawandeep Singh Bahl\") {\n            adjustUIBasedOnUserRole(false, true);\n        }\n        else if (resolvedObject.filteredEmployees.length === 0) {\n            if (resolvedObject.department.includes(\"Human Resources\")) {\n                adjustUIBasedOnUserRole(false, true);\n            }\n            else if (resolvedObject.department === \"Developer\") {\n                adjustUIBasedOnUserRole(true, false);\n            }\n        }\n        else {\n            if (resolvedObject.department.includes(\"Human Resources\")) {\n                adjustUIBasedOnUserRole(true, true);\n            }\n            else {\n                adjustUIBasedOnUserRole(true, false);\n            }\n        }\n        populateViewDropDown(resolvedObject.filteredEmployees);\n        fetchTodos(resolvedObject.userID)\n    }).catch((error) => {\n        if (typeof error === \"string\" && error === \"Manager ID was not found\") {\n            adjustUIBasedOnUserRole(false, false);\n        }\n        else {\n            console.log(\"Some other sort of error occured \", error);\n        }\n    })\n}\n\nsetUI();\n\nfunction getIncompleteTasksPercentage(userID) {\n    const startDate = root_element.querySelector('#start-date').value;\n    const endDate = root_element.querySelector('#end-date').value;\n\n    const plannedTasksPromise = fetchTodosBasedOnStatus(userID, startDate, endDate, \"all\");\n    const completedTasksPromise = fetchTodosBasedOnStatus(userID, startDate, endDate, 'Closed')\n\n    return Promise.all([plannedTasksPromise, completedTasksPromise]).then(function (results) {\n        const plannedTasks = results[0];\n        const completedTasks = results[1];\n\n\n        const percentageIncompleteTasks = calculateTasksPercentageNotCompleted(completedTasks, plannedTasks);\n\n        return percentageIncompleteTasks;\n    }).catch(function (error) {\n        return error;\n    })\n}\n\n\nfunction updateDelayedTasksPercentageUtility(userID) {\n    getIncompleteTasksPercentage(userID).then(function (lateTasksPercentage) {\n        lateTasksPercentage = lateTasksPercentage.toFixed(2);\n        // incompleteTasksElement.textContent = lateTasksPercentage;\n    }).catch(function (error) {\n        // incompleteTasksElement.textContent = 'Error';\n    })\n}\n\nsetDefaultDates();\nfetchTodos();\n\nconst delayedTasksElement = root_element.querySelector('#late-tasks-value');\nconst incompleteTasksElement = root_element.querySelector('#incomplete-tasks-value');\n\nconst taskTypeFilter = root_element.querySelector('#task-type-filter');\ntaskTypeFilter.addEventListener('change', function (event) {\n    const userID = root_element.querySelector('#view').value;\n    fetchTodos(userID);\n    updateDelayedTasksPercentageUtility(userID)\n});\n\nconst statusFilter = root_element.querySelector('#task-status');\nstatusFilter.addEventListener('change', function (event) {\n    const userID = root_element.querySelector('#view').value;\n    fetchTodos(userID);\n    updateDelayedTasksPercentageUtility(userID)\n});\n\nconst timePeriodFilter = root_element.querySelector('#time-period');\ntimePeriodFilter.addEventListener('change', handleTimePeriodChange)\n\nconst startDate = root_element.querySelector('#start-date');\nstartDate.addEventListener('change', function (event) {\n    const userID = root_element.querySelector('#view').value;\n    fetchTodos(userID);\n    updateDelayedTasksPercentageUtility(userID)\n});\n\nconst endDate = root_element.querySelector('#end-date');\nendDate.addEventListener('change', function (event) {\n    const userID = root_element.querySelector('#view').value;\n    fetchTodos(userID);\n    updateDelayedTasksPercentageUtility(userID)\n\n});\n\nconst employeeTodos = root_element.querySelector(`#view`);\nemployeeTodos.addEventListener('change', function (event) {\n    const selectedUserID = event.target.value;\n    fetchTodos(selectedUserID)\n\n    updateDelayedTasksPercentageUtility(selectedUserID)\n\n});\n\nconst departmentFilter = root_element.querySelector(\"#department-filter\");\ndepartmentFilter.addEventListener('change', function (event) {\n    const selectedDepartmentName = event.target.value;\n    if (selectedDepartmentName) {\n        fetchEmployeesWithDepartmentName(selectedDepartmentName).then((employees) => {\n            populateViewDropDown(employees);\n            fetchDepartments().then((departments) => {\n                populateDepartmentDropdown(departments, selectedDepartmentName)\n            })\n        }).catch((error) => console.log(error))\n    }\n    else {\n        populateViewDropDown([]);\n    }\n})\n\nconst priorityFilter = root_element.querySelector('#task-priority');\npriorityFilter.addEventListener('change', function (event) {\n    const userID = root_element.querySelector('#view').value;\n    fetchTodos(userID);\n});\n\n\n",
  "style": "body {\n    font-family: Arial, sans-serif;\n    background-color: #f0f0f0;\n    margin: 20px;\n}\n\n.filter-container {\n    margin-bottom: 20px;\n    display: flex;\n    flex-wrap: wrap; /* Allow wrapping of items */\n    justify-content: space-between; /* Distribute items evenly */\n}\n\n.filter-container {\n    margin-right: 10px; \n    margin-bottom: 10px;\n    display:flex;\n    align-items:center;\n    padding-right:5px;\n}\n\n.performance-container{\n    display:flex;\n    justify-content:space-between;\n}\n\n.filter-container label {\n    margin-right: 5px;\n}\n\n.closed-status {\n    color: red; /* Text color for Closed status */\n}\n\n.opened-status {\n    color: green; /* Text color for Open status */\n}\n\n.filter-container .form-control {\n    padding: 5px;\n    font-size: 14px;\n}\n\n.table {\n    width: 100%;\n    border-collapse: collapse;\n    margin-bottom: 20px; \n}\n\n.table th, .table td {\n    border: 1px solid #ccc;\n    padding: 8px;\n    text-align: left;\n}\n\n.table th {\n    background-color: #f2f2f2;\n    font-weight: bold;\n}\n\n.table tbody tr:nth-child(even) {\n    background-color: #f9f9f9;\n}\n\n.table tbody tr:hover {\n    background-color: #e9e9e9;\n}\n\n.close-todo {\n    background-color: #FF0000;\n    color: #FFF;\n    border: none; \n    padding: 6px 12px; \n    cursor: pointer;\n    border-radius: 4px;\n}\n.priority.high {\n    color: #ff4d4d;\n    background-color: white; \n    padding: 4px 8px;\n    border-radius: 4px;\n   \n}\n\n.priority.medium {\n    color: #ffa64d;\n    background-color: white; \n    padding: 4px 8px;\n    border-radius: 4px;\n   \n}\n\n.priority.low {\n    color: #ffff4d;\n    background-color: white;  \n    padding: 4px 8px;\n    border-radius: 4px;\n    \n}\n#apply-filters{\n    border: #4169E1;\n    padding:5px;\n    background-color:#4169E1;\n    color: #ffff;\n    border-radius:20%;\n}"
 },
 {
  "docstatus": 0,
  "doctype": "Custom HTML Block",
  "html": "<div id=\"full_name\"></div>\n<div id=\"email\"></div>",
  "modified": "2025-02-24 22:47:05.505754",
  "name": "Name Block",
  "private": 0,
  "roles": [],
  "script": "  frappe.call({\n    method: \"frappe.client.get\",\n        args: {\n            doctype: \"User\",\n            name: frappe.session.user,\n             },\n             callback(r) {\n                 if(r.message) {\n                    root_element.querySelector(\"#full_name\").textContent=r.message.full_name;\n                    root_element.querySelector('#email').textContent=r.message.email;\n                 }\n             }\n});",
  "style": null
 }
]